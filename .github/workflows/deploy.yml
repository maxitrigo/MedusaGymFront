name: CI/CD Pipeline

on:
  push:
    branches:
      - "main"

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.11.1

      - name: Install dependencies
        run: npm install

      - name: Create env file
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env

      - name: Build
        run: npm run build
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/gymmetrics-front:latest

      - name: Set up SSH key
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > /tmp/ec2_key.pem
          chmod 600 /tmp/ec2_key.pem

      - name: Deploy to EC2
        run: |
          ssh -i /tmp/ec2_key.pem -o StrictHostKeyChecking=no ubuntu@ec2-15-229-45-23.sa-east-1.compute.amazonaws.com << 'EOF'
            echo "Iniciando sesión en EC2..."

            echo "Ir a la carpeta raíz"
            cd gymmetrics

            echo "Parando el contenedor del frontend..."
            docker stop gymmetrics-front || true

            echo "Borrando el contenedor del frontend..."
            docker rm gymmetrics-front || true
            
            echo "Pull de la imagen más reciente..."
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/gymmetrics-front:latest

            echo "Levantando el contenedor del frontend..."
            docker run -d --network gymmetrics-network -p 8080:80 --name gymmetrics-front ${{ secrets.DOCKER_HUB_USERNAME }}/gymmetrics-front:latest

            echo "Borrando imágenes no utilizadas..."
            docker image prune -a -f

          EOF
